(function(d,u){typeof exports=="object"&&typeof module<"u"?module.exports=u():typeof define=="function"&&define.amd?define(u):(d=typeof globalThis<"u"?globalThis:d||self,d.MyBot=u())})(this,function(){"use strict";return{run:async u=>{await WA.onInit(),await WA.players.configureTracking({players:!0});let y,m=!1,b={};console.log(`Initializing bot with key${WA.room.hashParameters.key}`);async function A(e,o){var h;const t="https://api-production-db6f.up.railway.app/v1/chat-messages",w=`Bearer ${WA.room.hashParameters.key}`,g={inputs:{},query:e,response_mode:"streaming",conversation_id:b[o]||"",user:o,files:[]};try{console.log(`Handling chat message for bot: ${y}, message: ${e}`),WA.chat.startTyping({scope:"bubble"});const a=await fetch(t,{method:"POST",headers:{Authorization:w,"Content-Type":"application/json"},body:JSON.stringify(g)});if(!a.ok)throw new Error(`Failed to handle chat message: ${a.statusText}`);const r=(h=a.body)==null?void 0:h.getReader(),s=new TextDecoder;let i="";for(;;){const{done:c,value:p}=await(r==null?void 0:r.read());if(c)break;const M=s.decode(p,{stream:!0}).split(`
`);for(const f of M)if(f.trim()){const k=f.startsWith("data: ")?f.slice(6):f;try{const l=JSON.parse(k);l.answer&&(i+=l.answer),l.conversation_id&&(b[o]=l.conversation_id)}catch(l){console.error("Error parsing chunk:",l)}}}console.log("Custom AI text response:",i.trim()),WA.chat.sendChatMessage(i.trim(),{scope:"bubble"}),WA.chat.stopTyping({scope:"bubble"}),console.log("Chat message handled successfully.")}catch(a){console.error("Failed to handle chat message:",a)}}async function W(){try{console.log("Initializing bot with metadata:",u),y=WA.room.hashParameters.model||"kos",console.log(y+" is ready!"),console.log("Bot initialized successfully.")}catch(e){console.error("Failed to initialize bot:",e)}}async function U(e){try{console.log(`User ${e.name} with UUID ${e.uuid} joined the proximity meeting.`),console.log("Participant join handled successfully.")}catch(o){console.error("Failed to handle participant join:",o)}}try{await W(),WA.player.proximityMeeting.onJoin().subscribe(async e=>{await U(e)}),m||(WA.chat.onChatMessage(async(e,o)=>{if(!o.author){console.log("Received message with no author, ignoring.");return}console.log(`Received message from ${o.author.name}: ${e}`),await A(e,o.author.uuid)},{scope:"bubble"}),m=!0),console.log("Bot initialized!")}catch(e){console.error("Failed to run bot:",e)}WA.onInit().then(()=>{console.log("Initializing grouping..."),WA.state.onVariableChange("grouping").subscribe(()=>{C()})}).catch(e=>console.error("Error during WA.onInit:",e));async function C(){try{const e=Number(WA.state.grouping);console.log("Current grouping state:",e),await I(e)}catch(e){console.error("Error in updateGrouping:",e)}}async function I(e){e===1?(WA.event.broadcast("ping","start"),await P()):e===0?(WA.event.broadcast("ping","stop"),n=[],console.log("Cleared UUIDs array"),["Purple","Blue","Red","Green","Yellow","Orange"].forEach(t=>{WA.state[t]=[],console.log(`Cleared group ${t}`)})):console.warn("Unknown grouping state:",e)}let n=[];async function P(){n=[];const e=WA.event.on("pong").subscribe(o=>{const t=o.data;n.includes(t)||n.push(t)});try{await new Promise(o=>{setTimeout(()=>{o()},3e3)})}finally{e.unsubscribe(),$()}}async function $(){const e=["Purple","Blue","Red","Green","Yellow","Orange"],o={Purple:[],Blue:[],Red:[],Green:[],Yellow:[],Orange:[]},t=WA.player.uuid;console.log("My UUID:",t),n=n.filter(s=>s!==t),n.sort(()=>Math.random()-.5);const g=Math.min(e.length,Math.floor(n.length/2)),h=Math.floor(n.length/g),a=n.length%g;let r=0;e.slice(0,g).forEach((s,i)=>{const c=i<a?1:0,p=h+c;o[s]=n.slice(r,r+p),r+=p}),console.log("Formed groups:",o),Object.keys(o).forEach(s=>{o[s].forEach(c=>{console.log(`UUID ${c} is in group ${s}`),WA.event.broadcast(c,s)})}),G()}function G(){["Blue","Green","Orange","Red","Yellow","Purple"].forEach(o=>{const t=Math.floor(1e3+Math.random()*9e3).toString();WA.state[`code${o}`]=t,console.log(`Generated code for ${o}: ${t}`)})}}}});
